/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FHEZamaTalk {
  export type MessageStruct = {
    id: BigNumberish;
    conversationId: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    createdAt: BigNumberish;
    status: BigNumberish;
    content: BytesLike[];
    reaction: BytesLike;
  };

  export type MessageStructOutput = [
    id: bigint,
    conversationId: bigint,
    sender: string,
    receiver: string,
    createdAt: bigint,
    status: bigint,
    content: string[],
    reaction: string
  ] & {
    id: bigint;
    conversationId: bigint;
    sender: string;
    receiver: string;
    createdAt: bigint;
    status: bigint;
    content: string[];
    reaction: string;
  };

  export type UserProfileStruct = {
    name: string;
    wallet: AddressLike;
    avatarUrl: string;
    createdAt: BigNumberish;
    active: boolean;
  };

  export type UserProfileStructOutput = [
    name: string,
    wallet: string,
    avatarUrl: string,
    createdAt: bigint,
    active: boolean
  ] & {
    name: string;
    wallet: string;
    avatarUrl: string;
    createdAt: bigint;
    active: boolean;
  };

  export type ConversationStruct = {
    id: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    senderName: string;
    receiverName: string;
    createdAt: BigNumberish;
    status: BigNumberish;
  };

  export type ConversationStructOutput = [
    id: bigint,
    sender: string,
    receiver: string,
    senderName: string,
    receiverName: string,
    createdAt: bigint,
    status: bigint
  ] & {
    id: bigint;
    sender: string;
    receiver: string;
    senderName: string;
    receiverName: string;
    createdAt: bigint;
    status: bigint;
  };
}

export interface FHEZamaTalkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeReaction"
      | "conversations"
      | "createProfile"
      | "deactivateProfile"
      | "getMessage"
      | "getMessages"
      | "getProfile"
      | "getProfiles"
      | "messages"
      | "myConversations"
      | "nameExists"
      | "profiles"
      | "protocolId"
      | "resolveName"
      | "sendMessage"
      | "updateAvatar"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConversationCreated"
      | "MessageSent"
      | "ProfileCreated"
      | "ProfileUpdated"
      | "ReactionChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeReaction",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "conversations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfiles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myConversations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nameExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolveName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BytesLike[], BytesLike[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAvatar",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myConversations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nameExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAvatar",
    data: BytesLike
  ): Result;
}

export namespace ConversationCreatedEvent {
  export type InputTuple = [
    conversationId: BigNumberish,
    sender: AddressLike,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    conversationId: bigint,
    sender: string,
    receiver: string
  ];
  export interface OutputObject {
    conversationId: bigint;
    sender: string;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    messageId: BigNumberish,
    conversationId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    messageId: bigint,
    conversationId: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    messageId: bigint;
    conversationId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [user: AddressLike, name: string];
  export type OutputTuple = [user: string, name: string];
  export interface OutputObject {
    user: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike, field: string];
  export type OutputTuple = [user: string, field: string];
  export interface OutputObject {
    user: string;
    field: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReactionChangedEvent {
  export type InputTuple = [msgId: BigNumberish, by: AddressLike];
  export type OutputTuple = [msgId: bigint, by: string];
  export interface OutputObject {
    msgId: bigint;
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEZamaTalk extends BaseContract {
  connect(runner?: ContractRunner | null): FHEZamaTalk;
  waitForDeployment(): Promise<this>;

  interface: FHEZamaTalkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeReaction: TypedContractMethod<
    [msgId: BigNumberish, reactionExt: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  conversations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint] & {
        id: bigint;
        sender: string;
        receiver: string;
        senderName: string;
        receiverName: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  createProfile: TypedContractMethod<
    [name: string, avatarUrl: string],
    [void],
    "nonpayable"
  >;

  deactivateProfile: TypedContractMethod<[], [void], "nonpayable">;

  getMessage: TypedContractMethod<
    [msgId: BigNumberish],
    [FHEZamaTalk.MessageStructOutput],
    "view"
  >;

  getMessages: TypedContractMethod<
    [conversationId: BigNumberish],
    [FHEZamaTalk.MessageStructOutput[]],
    "view"
  >;

  getProfile: TypedContractMethod<
    [],
    [FHEZamaTalk.UserProfileStructOutput],
    "view"
  >;

  getProfiles: TypedContractMethod<
    [],
    [FHEZamaTalk.UserProfileStructOutput[]],
    "view"
  >;

  messages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, bigint, string] & {
        id: bigint;
        conversationId: bigint;
        sender: string;
        receiver: string;
        createdAt: bigint;
        status: bigint;
        reaction: string;
      }
    ],
    "view"
  >;

  myConversations: TypedContractMethod<
    [acount: AddressLike],
    [FHEZamaTalk.ConversationStructOutput[]],
    "view"
  >;

  nameExists: TypedContractMethod<[name: string], [boolean], "view">;

  profiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean] & {
        name: string;
        wallet: string;
        avatarUrl: string;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  resolveName: TypedContractMethod<[name: string], [string], "view">;

  sendMessage: TypedContractMethod<
    [
      to: AddressLike,
      contentExt: BytesLike[],
      proofs: BytesLike[],
      reactionExt: BytesLike,
      reactionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updateAvatar: TypedContractMethod<[newAvatar: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeReaction"
  ): TypedContractMethod<
    [msgId: BigNumberish, reactionExt: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "conversations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint] & {
        id: bigint;
        sender: string;
        receiver: string;
        senderName: string;
        receiverName: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [name: string, avatarUrl: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateProfile"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<
    [msgId: BigNumberish],
    [FHEZamaTalk.MessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessages"
  ): TypedContractMethod<
    [conversationId: BigNumberish],
    [FHEZamaTalk.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<[], [FHEZamaTalk.UserProfileStructOutput], "view">;
  getFunction(
    nameOrSignature: "getProfiles"
  ): TypedContractMethod<[], [FHEZamaTalk.UserProfileStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, bigint, string] & {
        id: bigint;
        conversationId: bigint;
        sender: string;
        receiver: string;
        createdAt: bigint;
        status: bigint;
        reaction: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "myConversations"
  ): TypedContractMethod<
    [acount: AddressLike],
    [FHEZamaTalk.ConversationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nameExists"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "profiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean] & {
        name: string;
        wallet: string;
        avatarUrl: string;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveName"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      to: AddressLike,
      contentExt: BytesLike[],
      proofs: BytesLike[],
      reactionExt: BytesLike,
      reactionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAvatar"
  ): TypedContractMethod<[newAvatar: string], [void], "nonpayable">;

  getEvent(
    key: "ConversationCreated"
  ): TypedContractEvent<
    ConversationCreatedEvent.InputTuple,
    ConversationCreatedEvent.OutputTuple,
    ConversationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReactionChanged"
  ): TypedContractEvent<
    ReactionChangedEvent.InputTuple,
    ReactionChangedEvent.OutputTuple,
    ReactionChangedEvent.OutputObject
  >;

  filters: {
    "ConversationCreated(uint256,address,address)": TypedContractEvent<
      ConversationCreatedEvent.InputTuple,
      ConversationCreatedEvent.OutputTuple,
      ConversationCreatedEvent.OutputObject
    >;
    ConversationCreated: TypedContractEvent<
      ConversationCreatedEvent.InputTuple,
      ConversationCreatedEvent.OutputTuple,
      ConversationCreatedEvent.OutputObject
    >;

    "MessageSent(uint256,uint256,address,address)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "ProfileCreated(address,string)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileUpdated(address,string)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "ReactionChanged(uint256,address)": TypedContractEvent<
      ReactionChangedEvent.InputTuple,
      ReactionChangedEvent.OutputTuple,
      ReactionChangedEvent.OutputObject
    >;
    ReactionChanged: TypedContractEvent<
      ReactionChangedEvent.InputTuple,
      ReactionChangedEvent.OutputTuple,
      ReactionChangedEvent.OutputObject
    >;
  };
}
